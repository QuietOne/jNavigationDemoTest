package navigation.test.control;

import com.jme3.ai.agents.Agent;
import com.jme3.ai.agents.util.GameObject;
import com.jme3.ai.agents.util.control.Game;
import com.jme3.ai.agents.util.control.GameControl;
import com.jme3.asset.AssetManager;
import com.jme3.asset.DesktopAssetManager;
import com.jme3.input.FlyByCamera;
import com.jme3.light.AmbientLight;
import com.jme3.material.Material;
import com.jme3.math.ColorRGBA;
import com.jme3.math.Quaternion;
import com.jme3.math.Vector3f;
import com.jme3.renderer.Camera;
import com.jme3.scene.Node;

/**
 *
 * @author Tihomir Radosavljevic
 * @version 1.0
 */
public class NavGameControl implements GameControl{

    private Node rootNode;
    
    public NavGameControl() {
        rootNode = Game.getInstance().getRootNode();
    }
    
    public void setInputManagerMapping() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void setCameraSettings(Camera cam) {
        cam.setLocation(new Vector3f(-2.0208273f, 75.118935f, -102.53528f));
        cam.setRotation(new Quaternion(0.21482386f, 0.16503507f, -0.036857624f, 0.9619021f));
    
    }

    public void setFlyCameraSettings(FlyByCamera flyCam) {
        flyCam.setMoveSpeed(30f);
    }

    public boolean finish() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public boolean win(Agent agent) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void restart() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void spawn(GameObject gameObject, Vector3f... area) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void setGameLighting() {
        //setting ambiental lighting
        AmbientLight amb = new AmbientLight();
        amb.setColor(new ColorRGBA(0.7f, 0.8f, 1.0f, 1f));
        rootNode.addLight(amb);
    }
    
    public void loadScene() {
        AssetManager assetManager = Game.getInstance().getApp().getAssetManager();
        Node scene = (Node) ((DesktopAssetManager) assetManager).loadModel("Models/navmesh/navmesh.blend");
        /*
         * Scene contains four nodes:
         * 1. blue - first platform
         * 2. green - stairs
         * 3. red - second platform
         * 4. navmesh - grayish, navmesh generated by Blender
         */
        Material material = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
        material.setColor("Color", ColorRGBA.Red);  
        scene.getChild("red").setMaterial(material);
        
        Material mat = material.clone();
        mat.setColor("Color", ColorRGBA.Blue);
        scene.getChild("blue").setMaterial(mat);
        
        mat = material.clone();
        mat.setColor("Color", ColorRGBA.Green);
        scene.getChild("green").setMaterial(mat);
        
        rootNode.attachChild(scene);
        setGameLighting();
    }
}
